public class 表示数值的字符串 {
	public static boolean isNumber(String string) {
		// 关于正则表达式的应用 
		return string.matches("[\\+-]?[0-9]*(\\.[0-9]*)?([eE][\\+-]?[0-9]+)?");
	}
	public static boolean isNumberic(String string) {
		if (string.length() == 0) {
			return false;
		}
		char[] s = string.toCharArray();
		// 如果只有一个数字的的花  那么第一个字符只能0 - 9
		if ((string.length() == 1) && (s[0] < '0' || s[0] > '9')) {
			return false;
		}
		if (s[0] == '+' || s[0] == '-') {
			if (s.length == 2 && s[1] == '.') {
				return false;
			}
		}
		else if ((s[0] < '0' || s[0] > '9') && s[0] != '.') {
			return false; // 第一个字符  既不是正负符号 ,也不是数字 还不是小数点 淡然不符合要求
		}
		
		// 主程序
		int i = 1;
		
		while (i < s.length && s[i] >= '0' && s[i] <= '9') {
			i++;
		}
		// 遇到第一个小数点 是允许的
		if (i < s.length && s[i] == '.') {
			i++;
			// 往后的数字 也是允许的
			while (i < s.length && s[i] >= '0' && s[i] <= '9') {
				i++;
			}
		}
		
		if (i < s.length && (s[i] == 'e' || s[i] == 'E')) {
			i++;
			// 第一个E e 后面 是可以是   + - 符号的
			// 如果不是的话  那就必须是 0-9的数字
			if (i < s.length && (s[i] == '+' || s[i] == '-')) {
				i++;
				if (i < s.length && (s[i] >= '0' && s[i] <= '9')) {
					i++;
				}
				else {
					return false;
				}
			}
			else if(i < s.length){
				while (i < s.length && (s[i] >= '0' && s[i] <= '9')){
					i++;
				}
			}
			else {
				return false;
			}
		}
		if (i < s.length) {
			return false;
		}
		
		return true;
	}
	public static void main(String[] args) {
		System.out.println(isNumberic("-1E-16"));
		System.out.println(isNumber("-1E-16"));
	}
}
